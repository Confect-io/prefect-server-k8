{{ if eq .Values.prefect.apollo.create true }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "prefect-ui.fullname" . }}-apollo
  namespace: {{ include "prefect-ui.namespace" . }}
  labels:
    app.kubernetes.io/component: apollo
    {{- include "prefect-ui.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.prefect.apollo.replicas.minReplicas }}
  selector:
    matchLabels:
      app.kubernetes.io/component: apollo
      {{- include "prefect-ui.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        app.kubernetes.io/component: apollo
        {{- include "prefect-ui.selectorLabels" . | nindent 8 }}
    spec:
      imagePullSecrets:
        {{- range .Values.imagePullSecrets }}
        - name: {{ . }}
        {{- end }}
      serviceAccountName: {{ include "prefect-ui.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
        - name: init-graphql
          image: {{ .Values.prefect.busybox.image.repository }}
          command:
          - sh
          - '-c'
          - 'until nslookup {{ include "prefect-ui.fullname" . }}-graphql.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for {{ include "prefect-ui.fullname" . }}-graphql; sleep 2; done'
      containers:
        - name: apollo
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.prefect.apollo.image.repository }}:{{ .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.prefect.apollo.image.pullPolicy }}
          command:
          - npm
          - run
          - serve
          env:
            - name: POD_NAMESPACE
              valueFrom: { fieldRef: { fieldPath: metadata.namespace } }
            - name: HASURA_API_URL
              # ${HASURA_API_URL:-http://hasura:3000/v1alpha1/graphql}
              value: 'http://{{ include "prefect-ui.fullname" . }}-hasura:{{ .Values.prefect.hasura.service.port }}/v1alpha1/graphql'
            - name: PREFECT_API_URL
              value: 'http://{{ include "prefect-ui.fullname" . }}-graphql:{{ .Values.prefect.graphql.service.port }}/graphql/'
            - name: PREFECT_API_HEALTH_URL
              value: 'http://{{ include "prefect-ui.fullname" . }}-graphql:{{ .Values.prefect.graphql.service.port }}/health'
            {{- with .Values.prefect.apollo.environment }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
          ports:
            - name: {{ .Values.prefect.hasura.service.name }}
              containerPort: {{ .Values.prefect.apollo.service.port }}
              protocol: TCP
          livenessProbe:
            tcpSocket:
              port: {{ .Values.prefect.apollo.service.port }}
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            tcpSocket:
              port: {{ .Values.prefect.apollo.service.port }}
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 3
          resources:
            {{- toYaml .Values.prefect.apollo.resources | nindent 12 }}
      volumes: []
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
{{ end }}
